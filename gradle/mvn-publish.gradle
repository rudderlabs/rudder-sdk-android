apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version getVersionName(VERSION_NAME)
            if (POM_PACKAGING == "aar") {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            } else {
                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            }
            artifact sourcesJar
            artifact javadocJar


            // Self-explanatory metadata for the most part
            pom {
                name = POM_NAME
                packaging = POM_PACKAGING
                description = POM_DESCRIPTION
                url = POM_URL

                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }

                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
                // A slight fix so that the generated POM will include any transitive dependencies
                // that the library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return // invalid dependencies should be ignored

                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('artifactId', dep.name)
                        if (dep.version == 'unspecified') {
                            dependencyNode.appendNode('groupId', GROUP)
                            dependencyNode.appendNode('version', version)
                        } else {
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('version', dep.version)
                        }
                        dependencyNode.appendNode('scope', scope)
                    }

                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }
    }
}



signing {
    def signingKeyId = rootProject.ext["signing.keyId"]
    def signingKey = rootProject.ext["signing.key"]
    def signingPassword = rootProject.ext["signing.password"]
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications
}
if(POM_PACKAGING == "aar"){
    tasks.named("signReleasePublication").configure { dependsOn("bundleReleaseAar") }
}else{
    tasks.named("signReleasePublication").configure { dependsOn("jar") }
}
publish.dependsOn build
publishToMavenLocal.dependsOn build
publishToSonatype.dependsOn publish
