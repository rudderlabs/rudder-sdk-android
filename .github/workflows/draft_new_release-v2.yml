name: Draft new release for v2

on:
  workflow_dispatch:
    inputs:
      module:
        required: true
        type: choice
        description: Choose module to draft release from
        options:
        - core
        - android
        - rudderjsonadapter
        - gsonrudderadapter
        - jacksonrudderadapter
        - moshirudderadapter
        - models
        - repository
        - rudderreporter
        - web

jobs:
  draft-new-release-v2:
    name: Draft a new release for v2
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/develop-v2') || startsWith(github.ref, 'refs/heads/hotfix-v2/')
    steps:
      - name: Checkout source branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Node 16
        uses: actions/setup-node@v3
        with:
          node-version: 16


      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      # Calculate the next release version based on conventional semantic release
      - name: Create release branch
        id: create-release-v2
        run: |
          module_input = ${{ github.event.inputs.module }}
          source_branch_name=${GITHUB_REF##*/}
          release_type=release-v2
          main_branch=master-v2
          grep -q "hotfix-v2/" <<< "${GITHUB_REF}" && release_type=hotfix-release-v2          
          git fetch origin "$main_branch" --depth=1
          git merge "origin/$main_branch"
          cd $module_input
          current_version=$(cat gradle.properties | grep "VERSION_NAME" | cut -d'=' -f2)
          
          npm ci
          npx standard-version --skip.commit --skip.tag --skip.changelog
          new_version="$module_input@$(cat gradle.properties | grep "VERSION_NAME" | cut -d'=' -f2)"
          git reset --hard
          cd ..
          branch_name="${release_type}/$module_input@${new_version}"

          echo "Source branch for new release is $source_branch_name"
          echo "Current version is $current_version"
          echo "Release type is $release_type"
          echo "New version is $new_version"
          echo "New release branch name is $branch_name"
          git checkout -b "$branch_name"
          git push --set-upstream origin "$branch_name"
          
          echo "::set-output name=source_branch_name::$source_branch_name"
          echo "::set-output name=branch_name::$branch_name"
          echo "::set-output name=new_version::$new_version"
          echo "::set-output name=main_branch::$main_branch"
          echo "::set-output name=module_name::$module_input"

      - name: Update changelog & bump version
        id: finish-release
        run: |
          cd $module_name
          npm ci
          npx standard-version -t "${module_name}@"
          cd ..
          git add . && git commit --amend --no-edit

      - name: Push new version in release branch & tag
        run: |
          cd $module_name
          git push --follow-tags
          cd ..

      - name: Create pull request into main
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ steps.create-release.outputs.branch_name }}
          destination_branch: ${{ steps.create-release.outputs.main_branch }}
          github_token: ${{ secrets.PAT }}
          pr_title: "chore(release): pulling ${{ steps.create-release.outputs.branch_name }} into ${{ steps.create-release.outputs.main_branch }}"
          pr_body:  ":crown: *An automated PR*"
          pr_reviewer: 'itsdebs'
